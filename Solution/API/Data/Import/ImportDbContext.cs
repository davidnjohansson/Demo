// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using API.Data.Import.Entities;

namespace API.Data.Import
{
    public partial class ImportDbContext : DbContext
    {
        public ImportDbContext(DbContextOptions<ImportDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ADRESSER> ADRESSER { get; set; } = null!;
        public virtual DbSet<ADRESSTYP> ADRESSTYP { get; set; } = null!;
        public virtual DbSet<ARBETSPLATSER> ARBETSPLATSER { get; set; } = null!;
        public virtual DbSet<KUNDER> KUNDER { get; set; } = null!;
        public virtual DbSet<POSITIONER> POSITIONER { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Finnish_Swedish_CI_AS");

            modelBuilder.Entity<ADRESSER>(entity =>
            {
                entity.HasKey(e => e.PK);

                entity.Property(e => e.Adress1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Adress2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Aktiv).HasDefaultValueSql("((1))");

                entity.Property(e => e.CO)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CfarNr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Epost)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Framkomlighet)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.InternInformation)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.KommunKod)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Kontakt)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LagerStalleNr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Lastinfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Lossinfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Mobiltelefon)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Namn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Ort)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PallregNummer)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Postnr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Referens)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.SiloId)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Slottid).HasColumnType("datetime");

                entity.Property(e => e.SlottidSlut).HasColumnType("datetime");

                entity.Property(e => e.Telefon1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Telefon2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Telefon3)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Vagbeskrivning)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Zon)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.FK_ADRESSTYPNavigation)
                    .WithMany(p => p.ADRESSER)
                    .HasForeignKey(d => d.FK_ADRESSTYP)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ADRESSER_ADRESSTYP");

                entity.HasOne(d => d.FK_POSITIONERNavigation)
                    .WithMany(p => p.ADRESSER)
                    .HasForeignKey(d => d.FK_POSITIONER)
                    .HasConstraintName("FK_ADRESSER_POSITIONER");
            });

            modelBuilder.Entity<ADRESSTYP>(entity =>
            {
                entity.HasKey(e => e.PK);

                entity.Property(e => e.AdresstypNamn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ARBETSPLATSER>(entity =>
            {
                entity.HasKey(e => e.PK);

                entity.HasIndex(e => e.FK_KUNDER, "_dta_index_ARBETSPLATSER_5_773577794__K3_1_2_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_4364");

                entity.Property(e => e.Aktiv)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Anläggningsnummer)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ArbetsplatsNamn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Fastighetsbeteckning)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Kartkod)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Nyckelkod)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Referens1)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Referens2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Referens3)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Referens4)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Referens5)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SekundarKund)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.FK_ADRESSERNavigation)
                    .WithMany(p => p.ARBETSPLATSER)
                    .HasForeignKey(d => d.FK_ADRESSER)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ARBETSPLATSER_ADRESSER");

                entity.HasOne(d => d.FK_KUNDERNavigation)
                    .WithMany(p => p.ARBETSPLATSER)
                    .HasForeignKey(d => d.FK_KUNDER)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ARBETSPLATSER_KUNDER");

                entity.HasOne(d => d.FK_POSITIONERNavigation)
                    .WithMany(p => p.ARBETSPLATSER)
                    .HasForeignKey(d => d.FK_POSITIONER)
                    .HasConstraintName("FK_ARBETSPLATSER_POSITIONER");
            });

            modelBuilder.Entity<KUNDER>(entity =>
            {
                entity.HasKey(e => e.PK);

                entity.HasIndex(e => e.PK, "_dta_index_KUNDER_5_958626458__K1_8066");

                entity.HasIndex(e => new { e.Mall, e.Aktiv, e.Kund, e.Abonnent }, "_dta_index_KUNDER_5_958626458__K59_K2_K14_K17_1_3_4_5_6_7_8_9_10_11_12_13_15_16_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_");

                entity.Property(e => e.AbonnentNr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Aktiv)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AndradAnvandare)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AndradTidpunkt).HasColumnType("datetime");

                entity.Property(e => e.BankClearing)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BankKonto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bankgiro)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Banknamn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BetalmetodExternkod)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BomkorningAction).HasDefaultValueSql("((0))");

                entity.Property(e => e.BomkorningEmailAdresser)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.BomkorningTillaten).HasDefaultValueSql("((0))");

                entity.Property(e => e.Bransch)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensionsbeskrivning)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensionskod)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EdiID)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EpostNVVBekraftelse)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EpostPaminnelse)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ExternkodMallKund)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ExternkodMallLev)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FK_FAKTURABRYT_ARBETSPLATS).HasDefaultValueSql("((1))");

                entity.Property(e => e.FakturaReferens)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.GANnr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.GGN)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.IBAN)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Info)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.KravInstruktion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.KreditInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Kreditforsakringsdatum).HasColumnType("datetime");

                entity.Property(e => e.Kund)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.KundNamn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.KundNr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KundNrEkonomi)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Kundid)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LitteraMask)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LitteraMaskDescription)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.MallNamn)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Orgnr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Pallregnr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PersonNrSwish)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PopupInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Postgiro)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Riksbankskod)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RowVersion)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SkapadAnvandare)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SkapadTidpunkt).HasColumnType("datetime");

                entity.Property(e => e.SparrSkrymmeMobilt).HasDefaultValueSql("((0))");

                entity.Property(e => e.SparrText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Swift)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonNrSwish)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TransportsedelMask)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.VarningText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Vat)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.FK_ADRESSER_BESOKSADRESSNavigation)
                    .WithMany(p => p.KUNDERFK_ADRESSER_BESOKSADRESSNavigation)
                    .HasForeignKey(d => d.FK_ADRESSER_BESOKSADRESS)
                    .HasConstraintName("FK_KUNDER_ADRESSER1");

                entity.HasOne(d => d.FK_ADRESSER_FAKTURAADRESSNavigation)
                    .WithMany(p => p.KUNDERFK_ADRESSER_FAKTURAADRESSNavigation)
                    .HasForeignKey(d => d.FK_ADRESSER_FAKTURAADRESS)
                    .HasConstraintName("FK_KUNDER_ADRESSER");

                entity.HasOne(d => d.FK_BETALARENavigation)
                    .WithMany(p => p.InverseFK_BETALARENavigation)
                    .HasForeignKey(d => d.FK_BETALARE)
                    .HasConstraintName("FK_KUNDER_KUNDER");

                entity.HasOne(d => d.FK_ENTREPRENADNavigation)
                    .WithMany(p => p.InverseFK_ENTREPRENADNavigation)
                    .HasForeignKey(d => d.FK_ENTREPRENAD)
                    .HasConstraintName("FK_KUNDER_ENTREPRENAD");

                entity.HasOne(d => d.FK_KONCERNNavigation)
                    .WithMany(p => p.InverseFK_KONCERNNavigation)
                    .HasForeignKey(d => d.FK_KONCERN)
                    .HasConstraintName("FK_KUNDER_KUNDER1");
            });

            modelBuilder.Entity<POSITIONER>(entity =>
            {
                entity.HasKey(e => e.PK);

                entity.Property(e => e.ReverseGeocodeResult)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}